databaseChangeLog:
  - logicalFilePath: changelog.yml
  - preConditions:
    - dbms:
        type: postgresql
    - runningAs:
        username: postgres

  - changeSet:
      author: kmschoep
      id: "create.project.owner.role.mlr_legacy"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_roles where rolname = 'mlr_legacy'
      changes:
        - sql: create role mlr_legacy with login password '${MLR_LEGACY_PASSWORD}';
        - rollback: drop role if exists mlr_legacy;

  - changeSet:
      author: kmschoep
      id: "grant.mlr_legacy.to.postgres"
      changes:
        - sql: grant mlr_legacy to postgres;
        - rollback: revoke mlr_legacy from postgres;

  - changeSet:
      author: kmschoep
      id: "create.project.user.role.mlr_legacy_user"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_roles where rolname = '${MLR_LEGACY_USER}'
      changes:
        - sql: create role mlr_legacy_user with login password '${MLR_LEGACY_USER_PASSWORD}';
        - rollback: drop role if exists mlr_legacy_user;

  - changeSet:
      author: kmschoep
      id: "create.project.database.mlr_legacy"
      preConditions:
        - onFail: MARK_RAN
        - onError: HALT
        - sqlCheck:
            expectedResult: 0
            sql: select count(*) from pg_database where datname = 'mlr_legacy_data'
      runInTransaction: false
      changes:
        - sql: create database mlr_legacy_data with owner = 'mlr_legacy';
        - rollback: drop database mlr_legacy_data if exists;

  - changeSet:
      author: kmschoep
      id: "alter.database.mlr_legacy.search_path"
      changes:
        - sql: alter database mlr_legacy_data set search_path = "$user", mlr_legacy, public;
        - rollback: alter database mlr_legacy_data reset search_path;
